import random

from VegansDeluxe.core.Actions.Action import DecisiveAction
from VegansDeluxe.core import AttachedAction, RegisterWeapon, MeleeAttack, MeleeWeapon, Entity, Enemies
from VegansDeluxe.core import OwnOnly
from deluxe.startup import engine
from .Dummy import Dummy
from ..Sessions.TelegramSession import TelegramSession
from VegansDeluxe.core.utils import percentage_chance


class Slime(Dummy):
    def __init__(self, session_id: str, name='–°–ª–∏–∑–µ–Ω—å|ü•ó'):
        super().__init__(session_id, name)

        self.weapon = SlimeWeapon(session_id, self.id)

        self.hp = 3
        self.max_hp = 3
        self.max_energy = 5

        self.team = 'slimes'

    def choose_act(self, session: TelegramSession):
        if not self.weapon:
            self.weapon = SlimeWeapon(self.session_id, self.id)

        super().choose_act(session)

        if self.nearby_entities != list(filter(lambda t: t != self, session.entities)):
            engine.action_manager.queue_action(session, self, SlimeApproach.id)
            return

        if self.energy == 0:
            engine.action_manager.queue_action(session, self, SlimeReload.id)
            return

        if percentage_chance(50):
            engine.action_manager.queue_action(session, self, SlimeEvade.id)
            return
        else:
            attack = engine.action_manager.get_action(session, self, SlimeAttack.id)
            attack.target = random.choice(attack.targets)
            engine.action_manager.queue_action_instance(attack)
            return

        # engine.action_manager.queue_action(session, self, SlimeSlop.id)


@AttachedAction(Slime)
class SlimeApproach(DecisiveAction):
    id = 'slime_approach'
    name = '–ü–æ–¥–ø—Ä—ã–≥–Ω—É—Ç—å'
    target_type = OwnOnly()

    def func(self, source, target):
        source.nearby_entities = list(filter(lambda t: t != source, self.session.entities))
        for entity in source.nearby_entities:
            entity.nearby_entities.append(source) if source not in entity.nearby_entities else None
        self.session.say(f'üë£|{source.name} –ø–æ–¥–ø—Ä—ã–≥–∏–≤–∞–µ—Ç –±–ª–∏–∂–µ!')


@AttachedAction(Slime)
class SlimeReload(DecisiveAction):
    id = 'slime_reload'
    name = '–£—Å—Ç–∞–ª–æ –ø–æ—Ö–ª—é–ø–∞—Ç—å'
    target_type = OwnOnly()

    def func(self, source, target):
        self.session.say(f'üíßÔ∏è|{source.name} —É—Å—Ç–∞–ª–æ —Ö–ª—é–ø–∞–µ—Ç. –ï–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ({source.max_energy})!')
        source.energy = source.max_energy


@AttachedAction(Slime)
class SlimeEvade(DecisiveAction):
    id = 'slime_evade'
    name = '–£—Å–∫–æ–ª—å–∑–Ω—É—Ç—å'
    target_type = OwnOnly()

    def func(self, source, target):
        self.source.inbound_accuracy_bonus = -5
        self.session.say(f'ü©≤|{source.name} —É—Å–∫–æ–ª—å–∑–∞–µ—Ç.')


@AttachedAction(Slime)
class SlimeSlop(DecisiveAction):
    id = 'slime_slop'
    name = '–•–ª—é–ø–∞—Ç—å'
    target_type = OwnOnly()

    def func(self, source, target):
        self.session.say(f"ü©≤|{source.name} —Ö–ª—é–ø–∞–µ—Ç.")


@RegisterWeapon
class SlimeWeapon(MeleeWeapon):
    id = 'slime_weapon'
    name = '–°–ª–∏–∑—å'
    description = '–•–ª—é–ø–∞–Ω—å–µ —Å–ª–∏–∑–Ω—è.'

    cubes = 3
    damage_bonus = 0
    energy_cost = 2
    accuracy_bonus = 0


@AttachedAction(SlimeWeapon)
class SlimeAttack(MeleeAttack):
    ATTACK_MESSAGE = "ü©≤|{source_name} –Ω–∞—Ö–ª—é–ø–∞–ª –Ω–∞ {target_name}! " \
                     "–ù–∞–Ω–µ—Å–µ–Ω–æ {damage} —É—Ä–æ–Ω–∞."
    MISS_MESSAGE = "üí®|{source_name} —Ö–ª—é–ø–∞–µ—Ç –Ω–∞ {target_name}, –Ω–æ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç."

    id = 'slime_attack'
    name = '–•–ª—é–ø–Ω—É—Ç—å'
    target_type = Enemies()

    def func(self, source: Slime, target: Entity):
        super().func(source, target)
        target.energy = max(0, target.energy - 1)

        if target.energy == 0:
            source.max_energy += 1
            source.energy = source.max_energy
            self.session.say(f"ü©≤|{source.name} —Ä–∞–¥–æ—Å—Ç—å—é –¥—Ä–æ–∂–∏—Ç, —ç–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 1!")
