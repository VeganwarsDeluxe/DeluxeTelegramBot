import random

import VegansDeluxe.core.Events.Events
from VegansDeluxe.core.Actions.Action import DecisiveAction
from VegansDeluxe.core import AttachedAction, RegisterWeapon, MeleeAttack, MeleeWeapon, Entity, Enemies, RegisterEvent, \
    EventContext, Session
from VegansDeluxe.core import OwnOnly
from VegansDeluxe.rebuild import DamageThreshold, Aflame

from startup import engine
from .Dummy import Dummy
from .TelegramEntity import TelegramEntity
from VegansDeluxe.core.utils import percentage_chance


class Beast(Dummy):
    def __init__(self, session_id: str, name='–ó–≤–µ—Ä—å|üê∫'):
        super().__init__(session_id, name)

        self.weapon = BeastWeapon(session_id, self.id)

        self.hp = 4
        self.max_hp = 4
        self.max_energy = 6

        self.team = 'Beast'

        @RegisterEvent(self.session_id, event=VegansDeluxe.core.Events.PostActionsGameEvent)
        def post_actions(context: EventContext[VegansDeluxe.core.Events.PostActionsGameEvent]):
            self.get_state(Aflame.id).extinguished = True

    def choose_act(self, session: Session):
        if session.turn == 1:
            self.get_state(DamageThreshold.id).threshold = 6

        if not self.weapon:
            self.weapon = BeastWeapon(self.session_id, self.id)

        super().choose_act(session)

        if self.nearby_entities != list(filter(lambda t: t != self, session.entities)) and percentage_chance(75):
            engine.action_manager.queue_action(session, self, BeastApproach.id)
            return

        if percentage_chance(5):
            engine.action_manager.queue_action(session, self, BeastGrowl.id)
            return

        targets = [entity for entity in self.nearby_entities if entity != self and entity.hp > 0]
        if targets:
            target = random.choice(targets)
            if target.hp == 1:
                attack = engine.action_manager.get_action(session, self, BeastBite.id)
                attack.target = target
                engine.action_manager.queue_action_instance(attack)
                return
            else:
                evade_action = engine.action_manager.get_action(session, self, BeastEvade.id)
                if target.energy >= 5:
                    # –ü—Ä–æ–≤–µ—Ä—å –∫—É–ª–¥–∞—É–Ω –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                    if session.turn > evade_action.cooldown_turn:
                        engine.action_manager.queue_action(session, self, BeastEvade.id)
                        return

                else:
                    if target.energy == 0:
                        attack = engine.action_manager.get_action(session, self, BeastAttackTwo.id)
                        attack.target = target
                        engine.action_manager.queue_action_instance(attack)
                        return
                    else:
                        attack = engine.action_manager.get_action(session, self, BeastAttack.id)
                        attack.target = target
                        engine.action_manager.queue_action_instance(attack)
                        return
        else:
            # If no valid targets, the beast reloads
            engine.action_manager.queue_action(session, self, BeastReload.id)
            return

        if percentage_chance(5):
            engine.action_manager.queue_action(session, self, BeastReload.id)
            return

        if self.energy == 0:
            engine.action_manager.queue_action(session, self, BeastReload.id)
            return

        if percentage_chance(30):
            engine.action_manager.queue_action(session, self, BeastEvade.id)
            return


@AttachedAction(Beast)
class BeastApproach(DecisiveAction):
    id = 'Beast_approach'
    name = '–ö—Ä–∞—Å—Ç—Ü–∞'
    target_type = OwnOnly()

    def func(self, source, target):
        source.nearby_entities = list(filter(lambda t: t != source, self.session.entities))
        for entity in source.nearby_entities:
            if source not in entity.nearby_entities:
                entity.nearby_entities.append(source)
        self.session.say(f'üêæ|{source.name} –∫—Ä–∞–¥—ë—Ç—Å—è –∫ —Å–≤–æ–µ–π –∂–µ—Ä—Ç–≤–µ –±–ª–∏–∂–µ...')


@AttachedAction(Beast)
class BeastReload(DecisiveAction):
    id = 'Beast_reload'
    name = '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥—É—Ö'
    target_type = OwnOnly()

    def func(self, source, target):
        self.session.say(f'üò§|{source.name} –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –¥—É—Ö. –≠–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ({source.max_energy})!')
        source.energy = source.max_energy


@AttachedAction(Beast)
class BeastEvade(DecisiveAction):
    id = 'Beast_evade'
    name = '–†–µ–∑–∫–æ –æ—Ç–ø—Ä—ã–≥–Ω—É—Ç—å'
    target_type = OwnOnly()

    def __init__(self, session: Session, source: Entity):
        super().__init__(session, source)
        self.cooldown_turn = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—É–ª–¥–∞—É–Ω–∞

    def is_on_cooldown(self) -> bool:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ
        return self.session.turn <= self.cooldown_turn

    def func(self, source, target):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if self.is_on_cooldown():
            return

        source.inbound_accuracy_bonus = -6
        self.session.say(f'üí®|{source.name} —Ä–µ–∑–∫–æ –æ—Ç–ø—Ä—ã–≥–∏–≤–∞–µ—Ç –Ω–∞–∑–∞–¥!')

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –Ω–∞ 4 —Ö–æ–¥–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ–¥–∞
        self.cooldown_turn = self.session.turn + 4

@AttachedAction(Beast)
class BeastGrowl(DecisiveAction):
    id = 'Beast_Growl'
    name = '–†—ã—á–∞—Ç—å'
    target_type = OwnOnly()

    def func(self, source, target):
        self.session.say(f"üí¢|{source.name} —Ä—ã—á–∏—Ç.")


@RegisterWeapon
class BeastWeapon(MeleeWeapon):
    id = 'Beast_weapon'
    name = '–ö–ª—ã–∫–∏ –∏ –∫–æ–≥—Ç–∏'
    description = '–†—ã—á–∞–Ω—å–µ –ó–≤–µ—Ä—è.'

    cubes = 3
    damage_bonus = 0
    energy_cost = 2
    accuracy_bonus = 1


@AttachedAction(BeastWeapon)
class BeastAttack(MeleeAttack):
    ATTACK_MESSAGE = "‚ùï|{source_name} –∞—Ç–∞–∫—É–µ—Ç –∫–æ–≥—Ç—è–º–∏ {target_name}! –ù–∞–Ω–µ—Å–µ–Ω–æ {damage} —É—Ä–æ–Ω–∞."
    MISS_MESSAGE = "üí®|{source_name} –∞—Ç–∞–∫—É–µ—Ç –∫–æ–≥—Ç—è–º–∏ {target_name}, –Ω–æ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç."

    id = 'Beast_attack'
    name = '–¶–∞—Ä–∞–ø–∞—Ç—å –∫–æ–≥—Ç—è–º–∏'
    target_type = Enemies()


@AttachedAction(BeastWeapon)
class BeastAttackTwo(MeleeAttack):
    id = 'Beast_attack_Two'
    name = '–ö—É—Å–∞—Ç—å –∫–ª—ã–∫–∞–º–∏'
    target_type = Enemies()

    def func(self, source, target):
        # –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–Ω
        lost_hp = target.max_hp - target.hp  # –ü–æ—Ç–µ—Ä—è–Ω–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Ü–µ–ª–∏
        final_damage = 1 + (3 * lost_hp)  # 1 –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω + 3 —É—Ä–æ–Ω–∞ –∑–∞ –∫–∞–∂–¥–æ–µ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–µ –•–ü

        target.hp = max(0, target.hp - final_damage)  # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–Ω–∞

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–Ω–µ—Å–µ–Ω–∏–∏ —É—Ä–æ–Ω–∞
        self.session.say(f"‚ùï|{source.name} –∞—Ç–∞–∫—É–µ—Ç –∫–æ–≥—Ç—è–º–∏ {target.name}. –ù–∞–Ω–µ—Å–µ–Ω–æ {final_damage} —É—Ä–æ–Ω–∞.")


@AttachedAction(BeastWeapon)
class BeastBite(MeleeAttack):
    id = 'beast_bite'
    name = 'C—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π —É–∫—É—Å'

    def func(self, source, target):
        target.hp = max(0, target.hp - 1)
        self.session.say(f"‚ùï‚ùï|{source.name} –¥–µ–ª–∞–µ—Ç —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä—ã–∂–æ–∫ –∫ {target.name} –∏ –∫—É—Å–∞–µ—Ç –µ–≥–æ! –¶–µ–ª—å —Ç–µ—Ä—è–µ—Ç 1‚ô•Ô∏è.")
