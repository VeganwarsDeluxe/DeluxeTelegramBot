import random

import VegansDeluxe.core.Events.Events
from VegansDeluxe.core.Actions.Action import DecisiveAction
from VegansDeluxe.core import AttachedAction, RegisterWeapon, MeleeAttack, MeleeWeapon, Entity, Enemies, RegisterEvent, \
    EventContext
from VegansDeluxe.core import OwnOnly
from VegansDeluxe.rebuild import DamageThreshold, Aflame

from startup import engine
from .Dummy import Dummy
from ..Sessions.TelegramSession import TelegramSession
from VegansDeluxe.core.utils import percentage_chance


# –ù–∞–≤–µ–¥—ñ—Ç—å —Ç—É—Ç –ø–æ—Ä—è–¥–æ–∫ –±—É–¥—å –ª–∞—Å–∫–∞.


class Beast(Dummy):
    def __init__(self, session_id: str, name='–ó–≤–µ—Ä—å|üê∫'):
        super().__init__(session_id, name)

        self.weapon = BeastWeapon(session_id, self.id)

        self.hp = 4
        self.max_hp = 4
        self.max_energy = 6

        self.team = 'Beast'

        @RegisterEvent(self.session_id, event=VegansDeluxe.core.Events.PostActionsGameEvent)
        def post_actions(context: EventContext[VegansDeluxe.core.Events.PostActionsGameEvent]):
            self.get_state(Aflame.id).extinguished = True

    def choose_act(self, session: TelegramSession):
        if session.turn == 1:
            self.get_state(DamageThreshold.id).threshold = 6

        if not self.weapon:
            self.weapon = BeastWeapon(self.session_id, self.id)

        super().choose_act(session)

        if self.nearby_entities != list(filter(lambda t: t != self, session.entities)) and percentage_chance(75):
            engine.action_manager.queue_action(session, self, BeastApproach.id)
            return

        if percentage_chance(5):
            engine.action_manager.queue_action(session, self, BeastGrowl.id)
            return

        def some_function(session, target):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Ü–µ–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ 1 HP
            if target.hp == 1:
                # –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫ –æ–±—ä–µ–∫—Ç—É engine.action_manager
                engine.action_manager.queue_action(session, self, BeastBite.id)

        if percentage_chance(40):
            engine.action_manager.queue_action(session, self, BeastReload.id)
            return

        if self.energy == 0:
            engine.action_manager.queue_action(session, self, BeastReload.id)

        if percentage_chance(30):
            engine.action_manager.queue_action(session, self, BeastEvade.id)
            return
        else:
            attack = engine.action_manager.get_action(session, self, BeastAttack.id)
            attack.target = random.choice(attack.targets)
            engine.action_manager.queue_action_instance(attack)
            return

        # engine.action_manager.queue_action(session, self, BeastSlop.id)


@AttachedAction(Beast)
class BeastApproach(DecisiveAction):
    id = 'Beast_approach'
    name = '–ö—Ä–∞—Å—Ç—Ü–∞'
    target_type = OwnOnly()

    def func(self, source, target):
        source.nearby_entities = list(filter(lambda t: t != source, self.session.entities))
        for entity in source.nearby_entities:
            entity.nearby_entities.append(source) if source not in entity.nearby_entities else None
        self.session.say(f'üêæ|{source.name} –∫—Ä–∞–¥—ë—Ç—Å—è –∫ —Å–≤–æ–µ–π –∂–µ—Ä—Ç–≤–µ –±–ª–∏–∂–µ...')


@AttachedAction(Beast)
class BeastReload(DecisiveAction):
    id = 'Beast_reload'
    name = '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥—É—Ö'
    target_type = OwnOnly()

    def func(self, source, target):
        self.session.say(f'üò§|{source.name} –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –¥—É—Ö. –ï–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ({source.max_energy})!')
        source.energy = source.max_energy


@AttachedAction(Beast)
class BeastEvade(DecisiveAction):
    id = 'Beast_evade'
    name = '–†–µ–∑–∫–æ –æ—Ç–ø—Ä—ã–≥–Ω—É—Ç—å'
    target_type = OwnOnly()

    def func(self, source, target):
        self.source.inbound_accuracy_bonus = -6
        self.session.say(f'üí®|{source.name} –†–µ–∑–∫–æ –æ—Ç–ø—Ä—ã–≥–∏–≤–∞–µ—Ç –Ω–∞–∑–∞–¥!')


@AttachedAction(Beast)
class BeastGrowl(DecisiveAction):
    id = 'Beast_slop'
    name = '–†—ã—á–∞—Ç—å'
    target_type = OwnOnly()

    def func(self, source, target):
        self.session.say(f"üí¢|{source.name} –†—ã—á–∏—Ç.")


@AttachedAction(Beast)
class BeastBite(DecisiveAction):
    def func(self, source: Beast, target: Entity):
        damage = super().func(source, target)
        if not damage:
            return
        target.hp = max(0, target.hp - 1)
        if target.hp == 1:
            target.hp -= 1
            self.session.say(f"‚ùï‚ùï|{source.name} –¥–µ–ª–∞–µ—Ç —Å—Ç—Ä–∏–º–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä—ã–∂–æ–∫ –∫ {target.name} –∏ –∫—É—Å–∞–µ—Ç –µ–≥–æ! –¶–µ–ª—å —Ç–µ—Ä—è–µ—Ç 1‚ô•Ô∏è.")


@RegisterWeapon
class BeastWeapon(MeleeWeapon):
    id = 'Beast_weapon'
    name = '–ö–ª—ã–∫–∏ –∏ –∫–æ–≥—Ç–∏'
    description = '–†—ã—á–∞–Ω—å–µ –ó–≤–µ—Ä—è.'

    cubes = 3
    damage_bonus = 0
    energy_cost = 2
    accuracy_bonus = 1


@AttachedAction(BeastWeapon)
class BeastAttack(MeleeAttack):
    ATTACK_MESSAGE = "‚ùï|{source_name} –∫—É—Å–∞–µ—Ç {target_name}! " \
                     "–ù–∞–Ω–µ—Å–µ–Ω–æ {damage} —É—Ä–æ–Ω–∞."
    MISS_MESSAGE = "üí®|{source_name} –∫—É—Å–∞–µ—Ç {target_name}, –Ω–æ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç."

    id = 'Beast_attack'
    name = '–ö—É—Å–∞—Ç—å'
    target_type = Enemies()

    def func(self, source: Beast, target: Entity):
        damage = super().func(source, target)
        if not damage:
            return
        target.hp = max(0, target.hp - 1)
        if target.hp == 1:
            target.hp -= 1
            self.session.say(f"‚ùï‚ùï|{source.name} –¥–µ–ª–∞–µ—Ç —Å—Ç—Ä–∏–º–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä—ã–∂–æ–∫ –∫ {target.name} –∏ –∫—É—Å–∞–µ—Ç –µ–≥–æ! –¶–µ–ª—å —Ç–µ—Ä—è–µ—Ç 1‚ô•Ô∏è.")
